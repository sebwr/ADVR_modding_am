{
	"onSwordHitEntity": {
		"prefix": "onSwordHitEntity",
		"body": "--- This event gets called whenever an entity is hit by the player's melee weapon and will about to be damaged. It expects you to return the damage with if applicable any modified damage values. Be aware that the entity value in the parameters may not always be valid as this method also gets called to indicate the damage amount for the melee weapon in the stats menu!\n--- @param hitInfos HitInfos Contains some data about the situation where the damage request was created.\nfunction onSwordHitEntity(hitInfos)\n    $0\nend",
		"description": "This event gets called whenever an entity is hit by the player's melee weapon and will about to be damaged. It expects you to return the damage with if applicable any modified damage values. Be aware that the entity value in the parameters may not always be valid as this method also gets called to indicate the damage amount for the melee weapon in the stats menu!"
	},
	"onKnifeHitEntity": {
		"prefix": "onKnifeHitEntity",
		"body": "--- This event gets called whenever an entity is hit by the player's ranged weapon and will about to be damaged, It expects you to return the damage with if applicable any modified damage values. Be aware that the entity value in the parameters may not always be valid as this method also gets called to indicate the damage amount for the ranged weapon in the stats menu!\n--- @param hitInfos HitInfos Contains some data about the situation where the damage request was created.\nfunction onKnifeHitEntity(hitInfos)\n    $0\nend",
		"description": "This event gets called whenever an entity is hit by the player's ranged weapon and will about to be damaged, It expects you to return the damage with if applicable any modified damage values. Be aware that the entity value in the parameters may not always be valid as this method also gets called to indicate the damage amount for the ranged weapon in the stats menu!"
	},
	"onDungeonGenerated": {
		"prefix": "onDungeonGenerated",
		"body": "--- This event gets called whenever a dungeon floor is generating, this specific one is called whenever the first room of a dungeon floor has been generated and (if needed) the player has been teleported into the dungeon.\n\nfunction onDungeonGenerated()\n    $0\nend",
		"description": "This event gets called whenever a dungeon floor is generating, this specific one is called whenever the first room of a dungeon floor has been generated and (if needed) the player has been teleported into the dungeon."
	},
	"onPreDungeonGenerated": {
		"prefix": "onPreDungeonGenerated",
		"body": "--- This event gets called right before a dungeon floor is about to generate. This may be handy if you want to influence any generation before the starting room has been generated.\n\nfunction onPreDungeonGenerated()\n    $0\nend",
		"description": "This event gets called right before a dungeon floor is about to generate. This may be handy if you want to influence any generation before the starting room has been generated."
	},
	"onEntityDeath": {
		"prefix": "onEntityDeath",
		"body": "--- This event indicates that an entity has died. Note! For performance reasons and for convenience it's highly recommend to set in the 'onLoad' the 'entityDeathListeners' variable, this will make sure that not all entities that die trigger this callback.\n--- @param enity LivingBase Reference to the entity which has died.\n--- @param source GameObject The source of what killed the entity. Can be undefined!\nfunction onEntityDeath(enity, source)\n    $0\nend",
		"description": "This event indicates that an entity has died. Note! For performance reasons and for convenience it's highly recommend to set in the 'onLoad' the 'entityDeathListeners' variable, this will make sure that not all entities that die trigger this callback."
	},
	"onPlayerDeath": {
		"prefix": "onPlayerDeath",
		"body": "--- This event gets called whenever the player died.\n--- @param name PlayerLiving desc\nfunction onPlayerDeath(name)\n    $0\nend",
		"description": "This event gets called whenever the player died."
	},
	"onKnifeCollide": {
		"prefix": "onKnifeCollide",
		"body": "--- This event gets called whenever a ranged projectile, shot or thrown by the player, hits an object.\n--- @param knife WeaponBase Reference to the knife kind waepon which collided.\n--- @param collidedObject Collision Reference to the object with which the weapon collided.\nfunction onKnifeCollide(knife, collidedObject)\n    $0\nend",
		"description": "This event gets called whenever a ranged projectile, shot or thrown by the player, hits an object."
	},
	"onSwordCollide": {
		"prefix": "onSwordCollide",
		"body": "--- This event gets called whenever a melee weapon hits an object.\n--- @param sword SwordBase Reference to the sword kind waepon which collided.\n--- @param collidedObject Collision Reference to the object with which the weapon collided.\nfunction onSwordCollide(sword, collidedObject)\n    $0\nend",
		"description": "This event gets called whenever a melee weapon hits an object."
	},
	"onPlayerHit": {
		"prefix": "onPlayerHit",
		"body": "--- This event gets called whenever the player gets hit, this event should return the first parameter and may modify this value to either do more or less damage.\n--- @param playerDamage integer The damage the player will receive\n--- @param damageSource GameObject The source that hit the player (if available)\n--- @param attacktype ATTACKTYPE The type of hit\n--- @param hitPosition Vector3 The position where the player was hit\nfunction onPlayerHit(playerDamage, damageSource, attacktype, hitPosition)\n    $0\nend",
		"description": "This event gets called whenever the player gets hit, this event should return the first parameter and may modify this value to either do more or less damage."
	},
	"onKnifeThrow": {
		"prefix": "onKnifeThrow",
		"body": "--- This event gets called whenever the player shoots or throws their ranged weapon.\n\nfunction onKnifeThrow()\n    $0\nend",
		"description": "This event gets called whenever the player shoots or throws their ranged weapon."
	},
	"onSaveLoaded": {
		"prefix": "onSaveLoaded",
		"body": "--- This event gets called when a player has a previous saved game and decides to load it again, after most of the world, the player stats and similar things have loaded this event will be called.\n\nfunction onSaveLoaded()\n    $0\nend",
		"description": "This event gets called when a player has a previous saved game and decides to load it again, after most of the world, the player stats and similar things have loaded this event will be called."
	},
	"onPickupTaken": {
		"prefix": "onPickupTaken",
		"body": "--- This event gets called whenever a player picks up an upgrade item during a run.\n--- @param pickup PickupDiskRepresentation The item representation that is associated with the pickup\n--- @param item ItemUpgrade Game object that represents the item in the world which will very shortly after this event get destroyed!\nfunction onPickupTaken(pickup, item)\n    $0\nend",
		"description": "This event gets called whenever a player picks up an upgrade item during a run."
	},
	"onSwordSwing": {
		"prefix": "onSwordSwing",
		"body": "--- This event gets called whenever the player swings their sword with a certain amount of force and after a small cooldown.\n--- @param force number Indicates how much force was used for the swing, this value represents the magnitude of the velocity vector.\nfunction onSwordSwing(force)\n    $0\nend",
		"description": "This event gets called whenever the player swings their sword with a certain amount of force and after a small cooldown."
	},
	"onPlayerValueChanged": {
		"prefix": "onPlayerValueChanged",
		"body": "--- This event gets called whenever a player related value changes such as their health, max health and more.\n--- @param changedValue string Indicates which value has been changed.\nfunction onPlayerValueChanged(changedValue)\n    $0\nend",
		"description": "This event gets called whenever a player related value changes such as their health, max health and more."
	},
	"onRunComplete": {
		"prefix": "onRunComplete",
		"body": "--- This event gets called whenever the beast has been defeated in it's very last stage, even before the death animation of the beast has fully been completed.\n\nfunction onRunComplete()\n    $0\nend",
		"description": "This event gets called whenever the beast has been defeated in it's very last stage, even before the death animation of the beast has fully been completed."
	},
	"onEnteredNGPlus": {
		"prefix": "onEnteredNGPlus",
		"body": "--- This event gets called whenever the player decides to enter 'New Game+'.\n--- @param ngplusLevel integer The current New Game+ level of the newly entered Game.\nfunction onEnteredNGPlus(ngplusLevel)\n    $0\nend",
		"description": "This event gets called whenever the player decides to enter 'New Game+'."
	},
	"onSpawnInHomeBase": {
		"prefix": "onSpawnInHomeBase",
		"body": "--- This event gets called every time the player gets teleported into the home base, whether this is after finishing a run or simply coming back from the main menu.\n\nfunction onSpawnInHomeBase()\n    $0\nend",
		"description": "This event gets called every time the player gets teleported into the home base, whether this is after finishing a run or simply coming back from the main menu."
	},
	"onSlotMachineGamble": {
		"prefix": "onSlotMachineGamble",
		"body": "--- This event gets called whenever the player uses a slot machine.\n--- @param typeOfSlotMachine string The type of slot machine.\n--- @param wasSuccessful  boolean Indicates if the player has won something from the slot machine.\nfunction onSlotMachineGamble(typeOfSlotMachine, wasSuccessful )\n    $0\nend",
		"description": "This event gets called whenever the player uses a slot machine."
	},
	"onProgressBought": {
		"prefix": "onProgressBought",
		"body": "--- This event gets called whenever the player purchases a progression upgrade from a NPC such as a weapon augment or an insight upgrade. \n--- @param vendor string Indicates which NPC the upgrade was bought from.\n--- @param boughtProgressItem ProgressDiskRepresentation Represents the representation associated with the upgrade item that handles the game logic code\nfunction onProgressBought(vendor, boughtProgressItem)\n    $0\nend",
		"description": "This event gets called whenever the player purchases a progression upgrade from a NPC such as a weapon augment or an insight upgrade. "
	},
	"onVersionUpgrade": {
		"prefix": "onVersionUpgrade",
		"body": "--- This event gets called whenever a new version of the game is available for the person playing the game, the game keeps track of the last version the person has played. This data is stored in their save file. The game may perform some backwards compatible upgrades to make sure that everything still works after upgrading, the game has used this for example in milestones.\n--- @param oldVersion integer The old game version\n--- @param newVersion integer The new game version\nfunction onVersionUpgrade(oldVersion, newVersion)\n    $0\nend",
		"description": "This event gets called whenever a new version of the game is available for the person playing the game, the game keeps track of the last version the person has played. This data is stored in their save file. The game may perform some backwards compatible upgrades to make sure that everything still works after upgrading, the game has used this for example in milestones."
	},
	"onPreBossFoodSpawn": {
		"prefix": "onPreBossFoodSpawn",
		"body": "--- This event gets called right before the food item after a boss spawns, if the user did not purchase this insight upgrade the event will still be called. The event serves the purpose of being able to override the item that spawns by returning an override, if you do not want to override the item make sure to return the override that has been given as the first parameter.\n--- @param foodItem GameObject The food item which will spawn behind the boss room. \n--- @param foodPosition Vector3 The location at which the item will spawn.\nfunction onPreBossFoodSpawn(foodItem, foodPosition)\n    $0\nend",
		"description": "This event gets called right before the food item after a boss spawns, if the user did not purchase this insight upgrade the event will still be called. The event serves the purpose of being able to override the item that spawns by returning an override, if you do not want to override the item make sure to return the override that has been given as the first parameter."
	},
	"onVoidClearerDestroyed": {
		"prefix": "onVoidClearerDestroyed",
		"body": "--- This event gets called whenever a 'void clearer' destroys and object, the void clearer is a big box underneath the level that destroys objects that fall out of the map to make sure they don't keep falling forever and take unecessary performance away.\n--- @param clearedObject GameObject The reference to the about getting destroyed game object.\nfunction onVoidClearerDestroyed(clearedObject)\n    $0\nend",
		"description": "This event gets called whenever a 'void clearer' destroys and object, the void clearer is a big box underneath the level that destroys objects that fall out of the map to make sure they don't keep falling forever and take unecessary performance away."
	},
	"onKnifeInHand": {
		"prefix": "onKnifeInHand",
		"body": "--- This event gets called whenever a ranged weapon projectile has returned to the player.\n\nfunction onKnifeInHand()\n    $0\nend",
		"description": "This event gets called whenever a ranged weapon projectile has returned to the player."
	},
	"onItemBought": {
		"prefix": "onItemBought",
		"body": "--- This event gets called whenever the player has bought an item in a shop. \n--- @param itemBase ItemBase the game object that represents the item in the world and will very shortly after this event get destroyed\n--- @param purchasePosition Vector3 The location where the purchased item was bought.\nfunction onItemBought(itemBase, purchasePosition)\n    $0\nend",
		"description": "This event gets called whenever the player has bought an item in a shop. "
	},
	"onFoodEaten": {
		"prefix": "onFoodEaten",
		"body": "--- This event gets called whenever a player eats some food.\n--- @param foodEaten ItemFood Reference to the food that has been eaten.\nfunction onFoodEaten(foodEaten)\n    $0\nend",
		"description": "This event gets called whenever a player eats some food."
	},
	"onGlobalTick": {
		"prefix": "onGlobalTick",
		"body": "--- This event gets called every now and then (by default every 0.5 seconds) which allows you to execute time based functions.\n\nfunction onGlobalTick()\n    $0\nend",
		"description": "This event gets called every now and then (by default every 0.5 seconds) which allows you to execute time based functions."
	},
	"onObjectCollect": {
		"prefix": "onObjectCollect",
		"body": "--- This event gets called when either a key or a coin in the world has been picked up by the player.\n--- @param pickupType string Indicates whether it's a \"key\" or a \"coin\".\nfunction onObjectCollect(pickupType)\n    $0\nend",
		"description": "This event gets called when either a key or a coin in the world has been picked up by the player."
	},
	"onPreObjectCollect": {
		"prefix": "onPreObjectCollect",
		"body": "--- This event gets called when either a key or a coin has been picked up and is about to change the player's current cash and trigger necessary events. This allows you to change the outcome, you should always return a valid number indicating the amount of coins or keys. If the outcome is zero or less then the sequence will be cancelled. \n--- @param pickupType string Indicates whether it's a \"key\" or a \"coin\".\n--- @param currentValue integer The current value that will be applied (may have already been changed by different event listeners!)\nfunction onPreObjectCollect(pickupType, currentValue)\n    $0\nend",
		"description": "This event gets called when either a key or a coin has been picked up and is about to change the player's current cash and trigger necessary events. This allows you to change the outcome, you should always return a valid number indicating the amount of coins or keys. If the outcome is zero or less then the sequence will be cancelled. "
	},
	"onButtonPress": {
		"prefix": "onButtonPress",
		"body": "--- This event gets called whenever a button has been pressed on a motion controller. \n--- @param keyID string The ID of the button.\n--- @param isPressed boolean Whether it's being pressed or is not being pressed (so released)\nfunction onButtonPress(keyID, isPressed)\n    $0\nend",
		"description": "This event gets called whenever a button has been pressed on a motion controller. "
	},
	"onTwitchMessage": {
		"prefix": "onTwitchMessage",
		"body": "--- This event gets called whenever a person has connected their Twitch account in the game and receives a message from a Twitch viewer during a live stream. \n--- @param senderUsername string The username of the person sending the message.\n--- @param message string The message it self\nfunction onTwitchMessage(senderUsername, message)\n    $0\nend",
		"description": "This event gets called whenever a person has connected their Twitch account in the game and receives a message from a Twitch viewer during a live stream. "
	},
	"onRoomEntered": {
		"prefix": "onRoomEntered",
		"body": "--- This event gets called whenever a player enters a room for the first time during a run. This will still be called for rooms that are the same but spawn more than once.\n--- @param room RoomFile The room the player entered.\nfunction onRoomEntered(room)\n    $0\nend",
		"description": "This event gets called whenever a player enters a room for the first time during a run. This will still be called for rooms that are the same but spawn more than once."
	},
	"onPreObjectSpawn": {
		"prefix": "onPreObjectSpawn",
		"body": "--- This event gets called whenever a prefab is about to be instantiated (spawned/created) but has not been spawned yet, this makes it possible to override the spawn. A note on this: You need to pre-define what objects you want to listen for as this would otherwise be very performance intensive.\n--- @param prefabOriginal GameObject The prefab that is spawned by the base game.\n--- @param prefabOverride GameObject The override of the original prefab. The override may have already changed by the time it gets called in your code by other mods or the game it self. An override can be changed by you by simply returning a different prefab, if you do not intend to change the prefab please return the override. \n--- @param location Vector3 The location where the object will spawn\n--- @param rotation Quaternion The rotation at which the object will spawn\nfunction onPreObjectSpawn(prefabOriginal, prefabOverride, location, rotation)\n    $0\nend",
		"description": "This event gets called whenever a prefab is about to be instantiated (spawned/created) but has not been spawned yet, this makes it possible to override the spawn. A note on this: You need to pre-define what objects you want to listen for as this would otherwise be very performance intensive."
	},
	"onPostObjectSpawn": {
		"prefix": "onPostObjectSpawn",
		"body": "--- This event gets called whenever a prefab has been instantiated (spawned/created). A note on this: You need to pre-define what objects you want to listen for as this would otherwise be very performance intensive. \n--- @param prefabOriginal GameObject The prefab that is spawned by the base game.\n--- @param prefabSpawned GameObject The actual game object that was spawned, which may or may not be the same as the prefab\nfunction onPostObjectSpawn(prefabOriginal, prefabSpawned)\n    $0\nend",
		"description": "This event gets called whenever a prefab has been instantiated (spawned/created). A note on this: You need to pre-define what objects you want to listen for as this would otherwise be very performance intensive. "
	},
	"onPickup": {
		"prefix": "onPickup",
		"body": "--- This is called when the player picks up an item.\n\nfunction onPickup()\n    $0\nend",
		"description": "This is called when the player picks up an item."
	},
	"onLoadPickUp": {
		"prefix": "onLoad",
		"body": "function onLoad()\n    pickup.name =\"${1:}\"\n    pickup.desc =\"${2:}\"\n    pickup.probability = ${3:}\n    pickup.maxAmount = ${4:}\n    pickup.amountUses = ${5:}\n    pickup.price = ${6:}\n    pickup.tier = ${7:}\n    pickup.spawnsIn = {${8:}}\n    pickup.isActivateItem = ${9:}\nend",
		"description": ""
	},
	"onLoadAchivement": {
		"prefix": "onLoad",
		"body": "function onLoad()\n    achievement.name =\"${1:}\"\n    achievement.desc =\"${2:}\"\n    achievement.hideDescription = ${3:}\n    achievement.insightReward = ${4:}\nend",
		"description": ""
	}
}
